import boto3
import requests
import logging
import json

logger = logging.getLogger()
logger.setLevel(logging.INFO)

import json
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

import json
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

import json
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def fetch_github_ipv4_ips(github_url, service):
    response = requests.get(github_url)
    data = response.json()

    # Ensure that the specified GitHub service exists in the data
    if service in data:
        github_service_data = data[service]

        # Check if 'github_service_data' is a list
        if isinstance(github_service_data, list):
            # Filter out IPv6 addresses
            ipv4_addresses = [ip for ip in github_service_data if ':' not in ip]
            return ipv4_addresses
        else:
            logger.error(f"Service '{service}' data is not in the expected format (list of IP addresses).")
    else:
        logger.error(f"Service '{service}' not found in GitHub data.")
    
    # If the service is not found or the data is not in the expected format, return an empty list
    return []


def update_security_groups(security_group_names, ip_ranges):
    ec2 = boto3.client("ec2")
    
    for group_name in security_group_names:
        security_groups = ec2.describe_security_groups(Filters=[{"Name": "group-name", "Values": [group_name]}])["SecurityGroups"]
        
        if not security_groups:
            logger.error("Security Group '%s' not found", group_name)
            continue
        
        security_group_id = security_groups[0]["GroupId"]
        
        ec2.authorize_security_group_ingress(
            GroupId=security_group_id,
            IpPermissions=[
                {
                    "IpProtocol": "tcp",
                    "FromPort": 22,
                    "ToPort": 22,
                    "IpRanges": ip_ranges
                }
            ]
        )
        logger.info("GitHub IPs added to Security Group '%s'", group_name)


def lambda_handler(event, context):
    try:
        github_url = event.get("github_url")
        service = event.get("service")
        security_group_names = event.get("security_group_names")
        
        if not github_url or not service or not security_group_names:
            return {
                "statusCode": 400,
                "body": "Missing input parameters"
            }
        
        github_ipv4_ips = fetch_github_ipv4_ips(github_url, service)
        
        if not github_ipv4_ips:
            logger.info(f"No matching IPv4 GitHub IPs found for the specified service '{service}'.")
            return {
                "statusCode": 200,
                "body": f"No matching IPv4 GitHub IPs found for the specified service '{service}'."
            }
        
        ip_ranges = [{"CidrIp": ip} for ip in github_ipv4_ips]
        
        update_security_groups(security_group_names, ip_ranges)
        
        return {
            "statusCode": 200,
            "body": f"IPv4 GitHub IPs for service '{service}' added to Security Groups"
        }
    except Exception as e:
        logger.error("Error: %s", str(e))
        return {
            "statusCode": 500,
            "body": "An error occurred"
        }

