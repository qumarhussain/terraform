import boto3
import requests
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def fetch_github_ips(github_url):
    response = requests.get(github_url)
    data = response.json()
    return data

def update_security_groups(security_group_names, ip_ranges):
    ec2 = boto3.client("ec2")
    
    for group_name in security_group_names:
        security_groups = ec2.describe_security_groups(Filters=[{"Name": "group-name", "Values": [group_name]}])["SecurityGroups"]
        
        if not security_groups:
            logger.error("Security Group '%s' not found", group_name)
            continue
        
        security_group_id = security_groups[0]["GroupId"]
        
        ec2.authorize_security_group_ingress(
            GroupId=security_group_id,
            IpPermissions=[
                {
                    "IpProtocol": "tcp",
                    "FromPort": 22,
                    "ToPort": 22,
                    "IpRanges": ip_ranges
                }
            ]
        )
        logger.info("GitHub IPs added to Security Group '%s'", group_name)


def lambda_handler(event, context):
    try:
        github_url = event.get("github_url")
        service = event.get("service")
        security_group_names = event.get("security_group_names")
        
        if not github_url or not service or not security_group_names:
            return {
                "statusCode": 400,
                "body": "Missing input parameters"
            }
        
        github_data = fetch_github_ips(github_url)
        
        if service not in github_data:
            logger.info("Service '%s' not found in GitHub data.", service)
            return {
                "statusCode": 200,
                "body": f"Service '{service}' not found in GitHub data."
            }
        
        github_ips = github_data[service]
        ip_ranges = [{"CidrIp": ip} for ip in github_ips]
        
        update_security_groups(security_group_names, ip_ranges)
        
        return {
            "statusCode": 200,
            "body": f"GitHub IPs for service '{service}' added to Security Groups"
        }
    except Exception as e:
        logger.error("Error: %s", str(e))
        return {
            "statusCode": 500,
            "body": "An error occurred"
        }
